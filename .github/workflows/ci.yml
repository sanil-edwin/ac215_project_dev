name: CI â€“ build & smoke test

on:
  workflow_dispatch:
  push:
    branches: [ ML2_pipeline ]   
  pull_request:
    branches: [ main ]

jobs:
  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      DOCKER_BUILDKIT: "1"
      COMPOSE_DOCKER_CLI_BUILD: "1"
      BUILDKIT_PROGRESS: "plain"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure data-ingestion/config exists (CI patch)
        run: |
          mkdir -p ML/data-ingestion/config
          [ -f ML/data-ingestion/config/.gitkeep ] || echo "" > ML/data-ingestion/config/.gitkeep

      - name: Show Docker versions
        run: |
          docker --version
          docker compose version

      # Optional: isolate the usual suspect first
      - name: Build data-ingestion first (debug)
        run: docker compose --progress=plain build data-ingestion

      - name: Build all images
        run: docker compose --progress=plain build

      - name: Prepare dirs
        run: mkdir -p data logs

      # Ingestion (sample)
      - name: Ingestion
        run: |
          docker compose run --rm data-ingestion \
            python src/download_yield_data.py --start-year 2015 --end-year 2024 --sample
          ls -la data/raw/yields || true

      # Preprocessing
      - name: Preprocessing
        run: |
          docker compose run --rm preprocessing \
            python src/preprocess_data.py
          ls -la data/processed || true

      # Yield model
      - name: Yield model
        run: |
          docker compose run --rm model-yield-forecasting \
            python src/train_model.py --verbose
          ls -la data/models || true

      # --------------------------
      # NEW: Rich artifact bundle
      # --------------------------
      - name: Summarize metrics and outputs
        run: |
          mkdir -p ci_summary
          echo "== FILE TREE (top 200) ==" > ci_summary/summary.txt
          (find data -type f | head -n 200) >> ci_summary/summary.txt || true
          echo "" >> ci_summary/summary.txt

          echo "== IMPORTANT METRICS ==" >> ci_summary/summary.txt
          # Try to cat common metric files if they exist
          for f in \
            data/models/yield_forecaster/model_metadata.json \
            data/models/stress_detector/model_metadata.json \
            data/processed/*/metrics.json \
            ; do
            [ -f "$f" ] && { echo "--- $f ---" >> ci_summary/summary.txt; cat "$f" >> ci_summary/summary.txt; echo "" >> ci_summary/summary.txt; }
          done

          echo "== FILE SIZES (top 30) ==" >> ci_summary/summary.txt
          du -ah data | sort -h | tail -n 30 >> ci_summary/summary.txt || true

          # Save environment context
          echo "== DOCKER VERSIONS ==" > ci_summary/context.txt
          docker --version >> ci_summary/context.txt
          docker compose version >> ci_summary/context.txt
          echo "" >> ci_summary/context.txt

          # Save your key project files for reference
          mkdir -p ci_summary/context_files
          cp -f compose.yaml ci_summary/context_files/ 2>/dev/null || true
          cp -f Makefile ci_summary/context_files/ 2>/dev/null || true

      - name: Create lightweight data peeks
        run: |
          mkdir -p ci_peeks
          # Peek at CSV predictions if present (head 200 lines)
          for f in data/models/**/predictions_*.csv; do
            [ -f "$f" ] || continue
            base=$(basename "$f")
            head -n 200 "$f" > "ci_peeks/${base%.csv}.head200.csv"
          done

      # (Optional) Exclude bulky raw data from the artifact to keep it small
      - name: Stage artifacts directory
        run: |
          mkdir -p ci_bundle
          rsync -a --delete \
            --exclude 'raw/**' \
            data/ ci_bundle/data/
          rsync -a logs/ ci_bundle/logs/ 2>/dev/null || true
          rsync -a ci_summary/ ci_bundle/ci_summary/
          rsync -a ci_peeks/ ci_bundle/ci_peeks/ 2>/dev/null || true
          mkdir -p ci_bundle/config_snapshots
          rsync -a ML/api/ ci_bundle/config_snapshots/api/ --include 'pyproject.toml' --include 'Dockerfile' --include 'app.py' --exclude '*' || true
          rsync -a ML/workflow/ ci_bundle/config_snapshots/workflow/ --include 'pyproject.toml' --include 'Dockerfile' --include 'run_workflow.py' --exclude '*' || true

      - name: Upload artifacts (compact bundle)
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: ci_bundle/**
          if-no-files-found: warn
          compression-level: 6
