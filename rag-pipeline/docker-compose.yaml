# Defines two services (containers) work together inside Docker network
# ChromaDB running as a local vector database, RAG app container connects to it and runs pipeline

networks:
    default:
        name: agri-rag-network #both services join network
        external: true  # Network already exists (created by docker-shell.sh)

services:
    agri-rag-cli:  # Service 1 (RAG APP) 
        image: agri-rag-cli
        container_name: agri-rag-cli
        volumes:
            - ${SECRETS_DIR}:/secrets  # Use the env var from docker-shell.sh
            - .:/app         # Use the env var
        environment:
            GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS}
            GCP_PROJECT: ${GCP_PROJECT}
            GCP_LOCATION: ${GCP_LOCATION:-us-central1}
            GCS_BUCKET: ${GCS_BUCKET}
            EMBEDDING_MODEL: ${EMBEDDING_MODEL:-text-embedding-004}
            EMBEDDING_DIMENSION: ${EMBEDDING_DIMENSION:-768}
            GENERATIVE_MODEL: ${GENERATIVE_MODEL:-gemini-2.0-flash-001}
            CHROMADB_HOST: agri-rag-chromadb
            CHROMADB_PORT: 8000
        depends_on:
            - chromadb

    chromadb:  # Service 2: ChromaDB vector database
        image: chromadb/chroma:latest
        container_name: agri-rag-chromadb
        ports:
            - 8000:8000
        volumes:
            - ./docker-volumes/chromadb:/chroma/chroma  # Persist ChromaDB data so don't lose when container stops
        environment:
            - IS_PERSISTENT=TRUE
            - ANONYMIZED_TELEMETRY=FALSE
            - CHROMA_CORS_ALLOW_ORIGINS=["*"]  # !! Allow all origins (not for production only dev)